#version 330 
#extension GL_ARB_explicit_uniform_location : require
#extension GL_ARB_shading_language_420pack : require
layout(location = 0) uniform float timer;
layout(location = 1) uniform float win_ratio;
out vec4 vcolor;
out vec4 pos;
uniform mat4 MVP;

void main(void)
{
	const vec4 vertices[8] = vec4[8](
		vec4(0.0, 0.0, 0.0, 1.0),
		vec4(0.0, 1.0, 0.0, 1.0),
		vec4(1.0, 0.0, 0.0, 1.0),
		vec4(1.0, 1.0, 0.0, 1.0),
		vec4(1.0, 0.0, 1.0, 1.0),
		vec4(1.0, 1.0, 1.0, 1.0),
		vec4(0.0, 0.0, 1.0, 1.0),
		vec4(0.0, 1.0, 1.0, 1.0)
	);

	const vec4 colors[8] = vec4[8](
		vec4(1.0, 0.0, 0.0, 1.0),
		vec4(0.0, 0.0, 0.0, 1.0),
		vec4(0.0, 1.0, 0.0, 1.0),
		vec4(0.0, 0.0, 1.0, 1.0),
		vec4(1.0, 0.0, 0.0, 1.0),
		vec4(0.0, 0.0, 0.0, 1.0),
		vec4(0.0, 1.0, 0.0, 1.0),
		vec4(0.0, 0.0, 1.0, 1.0)
	);

	const int triangles[12 * 3] = int[12 * 3](
		0, 1, 3,
		0, 2, 3,
		0, 2, 4,
		0, 4, 6,
		0, 1, 7,
		0, 6, 7,
		5, 2, 3,
		5, 2, 4,
		5, 1, 3,
		5, 1, 7,
		5, 6, 4,
		5, 6, 7
	);

	pos = vertices[triangles[gl_VertexID]];
	
//	if (win_ratio > 1.0){ pos.x /= win_ratio; }else{ pos.y *= win_ratio; }

	vcolor = colors[gl_VertexID];
	vcolor += 0.5 * pos;
	vcolor += vec4(
		sin(pos.x + pos.y + pos.x * pos.y * pos.z * 5.0 * timer),
		sin(2.0 * timer + pos.x * pos.x * pos.y * pos.z),
		sin(3.0 * timer + pos.y),
		1.0
	);
	//vcolor = (vcolor + 2.0 * vec4(0.0, 0.0, 0.0, 1.0)) / 3.0;
	
	gl_Position = MVP * pos;
}
