#version 330 
#extension GL_ARB_explicit_uniform_location : require
#extension GL_ARB_shading_language_420pack : require
uniform mat4 perspective;
uniform float mx;
uniform float my;
uniform float mz;
out vec3 vpos;
out vec3 normal;

void main(void)
{
	const vec3 vertices[8] = vec3[8](
		vec3(0, 0, 0),
		vec3(0, 1, 0),
		vec3(1, 0, 0),
		vec3(1, 1, 0),
		vec3(1, 0, 1),
		vec3(1, 1, 1),
		vec3(0, 0, 1),
		vec3(0, 1, 1)
	);

	const vec3 normals[6] = vec3[6](
		vec3( 0, 0, 1),
		vec3( 0, 1, 0),
		vec3( 0, 0,-1),
		vec3( 0,-1, 0),
		vec3(-1, 0, 0),
		vec3(1, 0, 0)
	);

	const int triangles[12 * 3] = int[12 * 3](
		0, 1, 3,
		0, 2, 3,
		0, 2, 4,
		0, 4, 6,
		5, 6, 4,
		5, 6, 7,
		5, 1, 3,
		5, 1, 7,
		5, 2, 3,
		5, 2, 4,
		0, 1, 7,
		0, 6, 7
	);

	vpos = vertices[triangles[gl_VertexID]];
	normal = normals[gl_VertexID / 6];
	
	vpos.x *= mx;
	vpos.y *= my;
	vpos.z *= mz;

	gl_Position = perspective * vec4(vpos, 1.0);
}

~ SEPARATOR ~

#version 330 
#extension GL_ARB_explicit_uniform_location : require

in vec3 vpos;
in vec3 normal;
out vec4 result;
uniform float mx;
uniform float my;
uniform float mz;

uniform vec3 light_pos1;
uniform vec3 light_pos2;
uniform vec3 camera_pos;

vec3 CalcPointLight1(vec3 light_pos)
{
    vec3 lightDir = normalize(light_pos - vpos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
	vec3 viewDir = camera_pos - vpos;
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 0.2);
    float distance = length(light_pos - vpos);
    float attenuation = 1.0 / (0.3 + 0.09 * distance + 0.032 * (distance * distance));    
    vec3 ambient = vec3(0.5);
    vec3 diffuse = diff * vec3(0.2);
    vec3 specular = spec * vec3(0.1);
	vec3 result = ambient + diffuse + specular;
	result *= attenuation;
    return result;
}

vec3 CalcPointLight2(vec3 light_pos)
{
    vec3 lightDir = normalize(light_pos - vpos);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
	vec3 viewDir = camera_pos - vpos;
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 0.2);
    float distance = length(light_pos - vpos);
    float attenuation = 1.0 / (0.5 + 0.9 * distance + 5 * (distance * distance));    
    vec3 ambient = vec3(0.0);
    vec3 diffuse = diff * vec3(0.5);
    vec3 specular = spec * vec3(0.1);
	vec3 result = ambient + diffuse + specular;
	result *= attenuation;
    result *= vec3(1.0, 0.2, 0.2);
	return result;
}

void main(void)
{	
	int X = abs(int(round(vpos.x * 30.0)));
	int Y = abs(int(round(vpos.y * 30.0)));
	int Z = abs(int(round(vpos.z * 30.0)));
	vec3 color = vec3(1.0, 1.0, 1.0);
	if ((X + Y + Z) % 2 == 0){
		color = vec3(0.5, 0.6, 0.7);
	}else{
		color = vec3(0.7, 0.8, 0.9);
	}
	
	if (length(vpos - vec3(mx / 2, my, mz / 2)) < 0.11){
		color = vec3(0.5);
	}
	
	if (length(vpos - vec3(mx / 2, my, mz / 2)) < 0.1){
		color = vec3(1);
	}

	vec3 light = CalcPointLight1(light_pos1) + CalcPointLight2(light_pos2);
	
	color *= light;

	color *= vec3(0.7, 0.9, 1.0);
	
	color.x = min(color.x, 1.0);
	color.y = min(color.y, 1.0);
	color.z = min(color.z, 1.0);

	float dist = length(camera_pos - vpos);
	float darkness = 1.0 / (1.0 + 0.1 * dist + 0.05 * dist * dist);
	color = darkness * color + (1 - darkness) * vec3(0, 0, 0);

	result = vec4(color, 1.0);
}
