#pragma once
#include "debug.cpp"

static inline ull expand(cull& a, cull& b) { return _pdep_u64(a, b); }
static inline ull compress(cull& a, cull& b) { return _pext_u64(a, b); }

static constexpr ull tentacle[8][64] = {{254ull,252ull,248ull,240ull,224ull,192ull,128ull,0ull,65024ull,64512ull,63488ull,61440ull,57344ull,49152ull,32768ull,0ull,16646144ull,16515072ull,16252928ull,15728640ull,14680064ull,12582912ull,8388608ull,0ull,4261412864ull,4227858432ull,4160749568ull,4026531840ull,3758096384ull,3221225472ull,2147483648ull,0ull,1090921693184ull,1082331758592ull,1065151889408ull,1030792151040ull,962072674304ull,824633720832ull,549755813888ull,0ull,279275953455104ull,277076930199552ull,272678883688448ull,263882790666240ull,246290604621824ull,211106232532992ull,140737488355328ull,0ull,71494644084506624ull,70931694131085312ull,69805794224242688ull,67553994410557440ull,63050394783186944ull,54043195528445952ull,36028797018963968ull,0ull,18302628885633695744ull,18158513697557839872ull,17870283321406128128ull,17293822569102704640ull,16140901064495857664ull,13835058055282163712ull,9223372036854775808ull,0ull},{9241421688590303744ull,36099303471055872ull,141012904183808ull,550831656960ull,2151686144ull,8404992ull,32768ull,0ull,4620710844295151616ull,9241421688590303232ull,36099303471054848ull,141012904181760ull,550831652864ull,2151677952ull,8388608ull,0ull,2310355422147510272ull,4620710844295020544ull,9241421688590041088ull,36099303470530560ull,141012903133184ull,550829555712ull,2147483648ull,0ull,1155177711056977920ull,2310355422113955840ull,4620710844227911680ull,9241421688455823360ull,36099303202095104ull,141012366262272ull,549755813888ull,0ull,577588851233521664ull,1155177702467043328ull,2310355404934086656ull,4620710809868173312ull,9241421619736346624ull,36099165763141632ull,140737488355328ull,0ull,288793326105133056ull,577586652210266112ull,1155173304420532224ull,2310346608841064448ull,4620693217682128896ull,9241386435364257792ull,36028797018963968ull,0ull,144115188075855872ull,288230376151711744ull,576460752303423488ull,1152921504606846976ull,2305843009213693952ull,4611686018427387904ull,9223372036854775808ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull},{72340172838076672ull,144680345676153344ull,289360691352306688ull,578721382704613376ull,1157442765409226752ull,2314885530818453504ull,4629771061636907008ull,9259542123273814016ull,72340172838076416ull,144680345676152832ull,289360691352305664ull,578721382704611328ull,1157442765409222656ull,2314885530818445312ull,4629771061636890624ull,9259542123273781248ull,72340172838010880ull,144680345676021760ull,289360691352043520ull,578721382704087040ull,1157442765408174080ull,2314885530816348160ull,4629771061632696320ull,9259542123265392640ull,72340172821233664ull,144680345642467328ull,289360691284934656ull,578721382569869312ull,1157442765139738624ull,2314885530279477248ull,4629771060558954496ull,9259542121117908992ull,72340168526266368ull,144680337052532736ull,289360674105065472ull,578721348210130944ull,1157442696420261888ull,2314885392840523776ull,4629770785681047552ull,9259541571362095104ull,72339069014638592ull,144678138029277184ull,289356276058554368ull,578712552117108736ull,1157425104234217472ull,2314850208468434944ull,4629700416936869888ull,9259400833873739776ull,72057594037927936ull,144115188075855872ull,288230376151711744ull,576460752303423488ull,1152921504606846976ull,2305843009213693952ull,4611686018427387904ull,9223372036854775808ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull},{0ull,256ull,66048ull,16909312ull,4328785920ull,1108169199616ull,283691315109888ull,72624976668147712ull,0ull,65536ull,16908288ull,4328783872ull,1108169195520ull,283691315101696ull,72624976668131328ull,145249953336262656ull,0ull,16777216ull,4328521728ull,1108168671232ull,283691314053120ull,72624976666034176ull,145249953332068352ull,290499906664136704ull,0ull,4294967296ull,1108101562368ull,283691179835392ull,72624976397598720ull,145249952795197440ull,290499905590394880ull,580999811180789760ull,0ull,1099511627776ull,283673999966208ull,72624942037860352ull,145249884075720704ull,290499768151441408ull,580999536302882816ull,1161999072605765632ull,0ull,281474976710656ull,72620543991349248ull,145241087982698496ull,290482175965396992ull,580964351930793984ull,1161928703861587968ull,2323857407723175936ull,0ull,72057594037927936ull,144115188075855872ull,288230376151711744ull,576460752303423488ull,1152921504606846976ull,2305843009213693952ull,4611686018427387904ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull},{0ull,1ull,3ull,7ull,15ull,31ull,63ull,127ull,0ull,256ull,768ull,1792ull,3840ull,7936ull,16128ull,32512ull,0ull,65536ull,196608ull,458752ull,983040ull,2031616ull,4128768ull,8323072ull,0ull,16777216ull,50331648ull,117440512ull,251658240ull,520093696ull,1056964608ull,2130706432ull,0ull,4294967296ull,12884901888ull,30064771072ull,64424509440ull,133143986176ull,270582939648ull,545460846592ull,0ull,1099511627776ull,3298534883328ull,7696581394432ull,16492674416640ull,34084860461056ull,69269232549888ull,139637976727552ull,0ull,281474976710656ull,844424930131968ull,1970324836974592ull,4222124650659840ull,8725724278030336ull,17732923532771328ull,35747322042253312ull,0ull,72057594037927936ull,216172782113783808ull,504403158265495552ull,1080863910568919040ull,2233785415175766016ull,4539628424389459968ull,9151314442816847872ull},{0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,1ull,2ull,4ull,8ull,16ull,32ull,64ull,0ull,256ull,513ull,1026ull,2052ull,4104ull,8208ull,16416ull,0ull,65536ull,131328ull,262657ull,525314ull,1050628ull,2101256ull,4202512ull,0ull,16777216ull,33619968ull,67240192ull,134480385ull,268960770ull,537921540ull,1075843080ull,0ull,4294967296ull,8606711808ull,17213489152ull,34426978560ull,68853957121ull,137707914242ull,275415828484ull,0ull,1099511627776ull,2203318222848ull,4406653222912ull,8813306511360ull,17626613022976ull,35253226045953ull,70506452091906ull,0ull,281474976710656ull,564049465049088ull,1128103225065472ull,2256206466908160ull,4512412933881856ull,9024825867763968ull,18049651735527937ull},{0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,1ull,2ull,4ull,8ull,16ull,32ull,64ull,128ull,257ull,514ull,1028ull,2056ull,4112ull,8224ull,16448ull,32896ull,65793ull,131586ull,263172ull,526344ull,1052688ull,2105376ull,4210752ull,8421504ull,16843009ull,33686018ull,67372036ull,134744072ull,269488144ull,538976288ull,1077952576ull,2155905152ull,4311810305ull,8623620610ull,17247241220ull,34494482440ull,68988964880ull,137977929760ull,275955859520ull,551911719040ull,1103823438081ull,2207646876162ull,4415293752324ull,8830587504648ull,17661175009296ull,35322350018592ull,70644700037184ull,141289400074368ull,282578800148737ull,565157600297474ull,1130315200594948ull,2260630401189896ull,4521260802379792ull,9042521604759584ull,18085043209519168ull,36170086419038336ull},{0ull,0ull,0ull,0ull,0ull,0ull,0ull,0ull,2ull,4ull,8ull,16ull,32ull,64ull,128ull,0ull,516ull,1032ull,2064ull,4128ull,8256ull,16512ull,32768ull,0ull,132104ull,264208ull,528416ull,1056832ull,2113664ull,4227072ull,8388608ull,0ull,33818640ull,67637280ull,135274560ull,270549120ull,541097984ull,1082130432ull,2147483648ull,0ull,8657571872ull,17315143744ull,34630287488ull,69260574720ull,138521083904ull,277025390592ull,549755813888ull,0ull,2216338399296ull,4432676798592ull,8865353596928ull,17730707128320ull,35461397479424ull,70918499991552ull,140737488355328ull,0ull,567382630219904ull,1134765260439552ull,2269530520813568ull,4539061024849920ull,9078117754732544ull,18155135997837312ull,36028797018963968ull,0ull}};
static constexpr int length[8][64] = {{7,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0},{7,6,5,4,3,2,1,0,6,6,5,4,3,2,1,0,5,5,5,4,3,2,1,0,4,4,4,4,3,2,1,0,3,3,3,3,3,2,1,0,2,2,2,2,2,2,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0},{7,7,7,7,7,7,7,7,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},{0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,6,0,1,2,3,4,5,5,5,0,1,2,3,4,4,4,4,0,1,2,3,3,3,3,3,0,1,2,2,2,2,2,2,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0},{0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7},{0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,1,2,2,2,2,2,2,0,1,2,3,3,3,3,3,0,1,2,3,4,4,4,4,0,1,2,3,4,5,5,5,0,1,2,3,4,5,6,6,0,1,2,3,4,5,6,7},{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7},{0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,2,2,2,2,2,2,1,0,3,3,3,3,3,2,1,0,4,4,4,4,3,2,1,0,5,5,5,4,3,2,1,0,6,6,5,4,3,2,1,0,7,6,5,4,3,2,1,0}};
static constexpr int space[128] = {0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7};
static constexpr int reversal[8][128] = {{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127},{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127},{0,2,1,3,4,6,5,7,8,10,9,11,12,14,13,15,16,18,17,19,20,22,21,23,24,26,25,27,28,30,29,31,32,34,33,35,36,38,37,39,40,42,41,43,44,46,45,47,48,50,49,51,52,54,53,55,56,58,57,59,60,62,61,63,64,66,65,67,68,70,69,71,72,74,73,75,76,78,77,79,80,82,81,83,84,86,85,87,88,90,89,91,92,94,93,95,96,98,97,99,100,102,101,103,104,106,105,107,108,110,109,111,112,114,113,115,116,118,117,119,120,122,121,123,124,126,125,127},{0,4,2,6,1,5,3,7,8,12,10,14,9,13,11,15,16,20,18,22,17,21,19,23,24,28,26,30,25,29,27,31,32,36,34,38,33,37,35,39,40,44,42,46,41,45,43,47,48,52,50,54,49,53,51,55,56,60,58,62,57,61,59,63,64,68,66,70,65,69,67,71,72,76,74,78,73,77,75,79,80,84,82,86,81,85,83,87,88,92,90,94,89,93,91,95,96,100,98,102,97,101,99,103,104,108,106,110,105,109,107,111,112,116,114,118,113,117,115,119,120,124,122,126,121,125,123,127},{0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15,16,24,20,28,18,26,22,30,17,25,21,29,19,27,23,31,32,40,36,44,34,42,38,46,33,41,37,45,35,43,39,47,48,56,52,60,50,58,54,62,49,57,53,61,51,59,55,63,64,72,68,76,66,74,70,78,65,73,69,77,67,75,71,79,80,88,84,92,82,90,86,94,81,89,85,93,83,91,87,95,96,104,100,108,98,106,102,110,97,105,101,109,99,107,103,111,112,120,116,124,114,122,118,126,113,121,117,125,115,123,119,127},{0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23,15,31,32,48,40,56,36,52,44,60,34,50,42,58,38,54,46,62,33,49,41,57,37,53,45,61,35,51,43,59,39,55,47,63,64,80,72,88,68,84,76,92,66,82,74,90,70,86,78,94,65,81,73,89,69,85,77,93,67,83,75,91,71,87,79,95,96,112,104,120,100,116,108,124,98,114,106,122,102,118,110,126,97,113,105,121,101,117,109,125,99,115,107,123,103,119,111,127},{0,32,16,48,8,40,24,56,4,36,20,52,12,44,28,60,2,34,18,50,10,42,26,58,6,38,22,54,14,46,30,62,1,33,17,49,9,41,25,57,5,37,21,53,13,45,29,61,3,35,19,51,11,43,27,59,7,39,23,55,15,47,31,63,64,96,80,112,72,104,88,120,68,100,84,116,76,108,92,124,66,98,82,114,74,106,90,122,70,102,86,118,78,110,94,126,65,97,81,113,73,105,89,121,69,101,85,117,77,109,93,125,67,99,83,115,75,107,91,123,71,103,87,119,79,111,95,127},{0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,12,76,44,108,28,92,60,124,2,66,34,98,18,82,50,114,10,74,42,106,26,90,58,122,6,70,38,102,22,86,54,118,14,78,46,110,30,94,62,126,1,65,33,97,17,81,49,113,9,73,41,105,25,89,57,121,5,69,37,101,21,85,53,117,13,77,45,109,29,93,61,125,3,67,35,99,19,83,51,115,11,75,43,107,27,91,59,123,7,71,39,103,23,87,55,119,15,79,47,111,31,95,63,127}};


int pos(int y, int x) { return y * 8 + x; }

pair <int,int> crd(int i) { return {i / 8, i % 8}; }

bool inside(int y, int x) { return y >= 0 && y <= 7 && x >= 0 && x <= 7; }

struct Board
{
	ull mask[2] = {0, 0};

	void update(ull& m1, ull& m2, cull& tent, cint& len, const bool& rev){
		ull t1 = compress(m1, tent);
		ull t2 = compress(m2, tent);
		if (rev) t1 = reversal[len][t1], t2 = reversal[len][t2];
		cint s = space[t2];
		if (s >= len || ((t1 >> s) & 1) == 0) return;
		cull upd = (1ull << s) - 1;
		t1 ^= upd, t2 ^= upd;
		if (rev) t1 = reversal[len][t1], t2 = reversal[len][t2];
		m1 = ((m1 & (~tent)) ^ expand(t1, tent));
		m2 = ((m2 & (~tent)) ^ expand(t2, tent));
	}

	void make_move(int i, int player){
		ull& m1 = mask[player];
		ull& m2 = mask[player ^ 1];
		m1 ^= (1ull << i);
		assert(((m2 >> i) & 1) == 0);
		update(m1, m2, tentacle[0][i], length[0][i], 0);
		update(m1, m2, tentacle[1][i], length[1][i], 0);
		update(m1, m2, tentacle[2][i], length[2][i], 0);
		update(m1, m2, tentacle[3][i], length[3][i], 0);
		update(m1, m2, tentacle[4][i], length[4][i], 1);
		update(m1, m2, tentacle[5][i], length[5][i], 1);
		update(m1, m2, tentacle[6][i], length[6][i], 1);
		update(m1, m2, tentacle[7][i], length[7][i], 1);
	}

	bool valid_move(int i, int player){
		cull m1 = mask[player];
		cull m2 = mask[player ^ 1];
		if ((m1 >> i) & 1) return false;
		if ((m2 >> i) & 1) return false;
		make_move(i, player);
		const bool res = m2 != mask[player ^ 1];
		mask[player] = m1;
		mask[player ^ 1] = m2;
		return res;
	}

	ull valid_move_mask(int player){
		ull res = 0;
		rep(i, 0, 63){
			if (valid_move(i, player)){
				res ^= (1ull << i);
			}
		}
		return res;
	}

	int read(int i){
		if ((mask[0] >> i) & 1) return 1;
		if ((mask[1] >> i) & 1) return 2;
		return 0;
	}

	void init(){
		mask[0] = mask[1] = 0;
		make_move(pos(3, 4), 0);
		make_move(pos(4, 3), 0);
		make_move(pos(3, 3), 1);
		make_move(pos(4, 4), 1);
	}

	void draw(){
		cout << "vvvvvvvv\n";
		rep(y, 0, 7){
			rep(x, 0, 7){
				int v = read(pos(y, x));
				if (v == 0) cout << GREEN << '.' << RESET;
				if (v == 1) cout << BOLDBLACK << 'O' << RESET;
				if (v == 2) cout << BOLDWHITE << 'O' << RESET;
			}
			cout << "\n";
		}
		cout << "^^^^^^^^\n";
	}

	int count_points(int player){
		return __builtin_popcountll(mask[player]);
	}
};

struct State
{
	Board board;
	int player;

	void init() { board.init(); player = 0; }
	
	bool terminal() { return board.valid_move_mask(player) == 0; }
	
	ull valid_move_mask() { return board.valid_move_mask(player); }

	void make_move(int i) { board.make_move(i, player); player ^= 1; }

	bool valid_move(int i) { return board.valid_move(i, player); }
	
	int winner(){
		int score0 = board.count_points(0);
		int score1 = board.count_points(1);
		if (score0 > score1) return 0;
		if (score0 < score1) return 1;
		return 1;
	}

	int count_points(int player) { return board.count_points(player); }
	
	void draw() { board.draw(); dbg(player); dbg(board.count_points(0)); dbg(board.count_points(1)); }
	
	int turn() { return count_points(0) + count_points(1) - 4; }

	State() { init(); }
};
